model <- svm(label ~ ., data = as.data.frame(u_T[,(1:k*116)]))
score <- predict(model, as.data.frame(u_T[,(1:k*116)]))
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l[,2], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'glm with regularization', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,2], 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 500
# ASD patients w/o labels
x <- u[(1:50),(1:(k*116))]
# TD patients w/o labels
z <- u[(51:n0),(1:(k*116))]
u_T <- cbind(rbind(x, z), Label = c(rep(1, 50), rep(0, n0 - 50)))
t_l <- matrix(NA, P, 2)
label <- c(rep(1, 50), rep(0, n0 - 50))
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1: 50]), cbind(z, Label = l[51:n0]))
model <-  svm(l ~ ., data = as.data.frame(u_t[,(1:k*116)]))
#model <- glmnet(u_t[,(1:(k*116))], l, family = "binomial", maxit = 80, alpha = 0.2)
#model <- glm(Label ~ ., data = as.data.frame(u_t))
# Get the model's scores
#score <- predict(model, u_t[,(1:(k*116))], s = 0.1)
score <- predict(model, as.data.frame(u_t[,(1:k*116)]))
# Find and save the test statistic computed on the scores
t_l[i, 1] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_t[,(1:(k*116))], s = 0.05)
t_l[i, 2] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
par(mfrow = c(1,2))
hist(t_l[,1], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'Support Vector Machine', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,1], 1-alpha), lwd = 3, col = '#093824')
model <- svm(label ~ ., data = as.data.frame(u_T[,(1:k*116)]))
score <- predict(model, as.data.frame(u_T[,(1:k*116)]))
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l[,2], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'glm with regularization', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,2], 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 200
# ASD patients w/o labels
x <- u[(1:n0),(1:(k*116))]
# TD patients w/o labels
z <- u[(n0+1):(n0+n1),(1:(k*116))]
t_l <- matrix(NA, P, 2)
label <- c(rep(0, n0), rep(1, n1))
# Simulation
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0 + n1)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1:n0]), cbind(z, Label = l[(n0+1):(n0+n1)]))
# Train the model on the permutated data set
model <-  svm(l ~ ., data = as.data.frame(u_t[,(1:k*116)]))
#model <- glmnet(u_t[,(1:(k*116))], l, family = "binomial", maxit = 80, alpha = 0.2)
#model <- glm(Label ~ ., data = as.data.frame(u_t))
# Get the model's scores
#score <- predict(model, u_t[,(1:(k*116))], s = 0.1)
score <- predict(model, as.data.frame(u_t[,(1:k*116)]))
# Find and save the test statistic computed on the scores
t_l[i, 1] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
#model <- glm(Label ~ ., data = as.data.frame(u_t))
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_t[,(1:(k*116))], s = 0.5)
t_l[i, 2] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
par(mfrow = c(1,2))
hist(t_l[,1], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'Support Vector Machine', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,1], 1-alpha), lwd = 3, col = '#093824')
model <- svm(label ~ ., data = as.data.frame(u[,(1:k*116)]))
score <- predict(model, as.data.frame(u[,(1:k*116)]))
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l[,2], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'glm with regularization', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,2], 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
hist(score[1:n0], col = '#093824', alpha = 0.5, xlim = c(0,1))
hist(score[(n0+1):(n0+n1)], add = T, col = '#71B48D', alpha = 0.5)
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 200
# ASD patients w/o labels
x <- u[(1:n0),(1:(k*116))]
# TD patients w/o labels
z <- u[(n0+1):(n0+n1),(1:(k*116))]
t_l <- matrix(NA, P, 2)
label <- c(rep(0, n0), rep(1, n1))
# Simulation
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0 + n1)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1:n0]), cbind(z, Label = l[(n0+1):(n0+n1)]))
# Train the model on the permutated data set
model <-  svm(l ~ ., data = as.data.frame(u_t[,(1:k*116)]))
#model <- glmnet(u_t[,(1:(k*116))], l, family = "binomial", maxit = 80, alpha = 0.2)
#model <- glm(Label ~ ., data = as.data.frame(u_t))
# Get the model's scores
#score <- predict(model, u_t[,(1:(k*116))], s = 0.1)
score <- predict(model, as.data.frame(u_t[,(1:k*116)]))
# Find and save the test statistic computed on the scores
t_l[i, 1] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
#model <- glm(Label ~ ., data = as.data.frame(u_t))
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_t[,(1:(k*116))], s = 0.5)
t_l[i, 2] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
# par(mfrow = c(1,2))
# hist(t_l[,1], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'Support Vector Machine', xlab = 'test statistics') # TODO aggiungi main
# abline(v=quantile(t_l[,1], 1-alpha), lwd = 3, col = '#093824')
#
# model <- svm(label ~ ., data = as.data.frame(u[,(1:k*116)]))
# score <- predict(model, as.data.frame(u[,(1:k*116)]))
# abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l[,2], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'glm with regularization', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,2], 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
# hist(score[1:n0], col = '#093824', alpha = 0.5, xlim = c(0,1))
# hist(score[(n0+1):(n0+n1)], add = T, col = '#71B48D', alpha = 0.5)
# Number of features
k <- 5
asd <- c()
# Select all the informations and save them
for(i in (1:length(asd_st))){
paziente <- asd_st[[i]]
for(j in (1:116)){
p <- acf(paziente[[j]], lag = length(paziente[[j]]), type = "covariance", pl=F)$acf
asd <- c(asd, mean(p))
asd <- c(asd, sd(p))
asd <- c(asd, quantile(paziente[[j]], 0.25))
asd <- c(asd, median(p))
asd <- c(asd, quantile(paziente[[j]], 0.75))
}
}
asd <- t(matrix(asd, nrow = 116*k))
td <- c()
# Select all the informations and save them
for(i in (1:length(td_st))){
paziente <- td_st[[i]]
for(j in (1:116)){
p <- acf(paziente[[j]], lag = length(paziente[[j]]), type = "covariance", pl=F)$acf
td <- c(td, mean(p))
td <- c(td, sd(p))
td <- c(td, quantile(paziente[[j]], 0.25))
td <- c(td, median(p))
td <- c(td, quantile(paziente[[j]], 0.75))
}
}
td <- t(matrix(td, nrow = 116*k))
# Put the data together with the labels
u <- cbind(rbind(asd, td), Label = c(rep(1, length(asd_data)), rep(0, length(td_data))))
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 200
# ASD patients w/o labels
x <- u[(1:n0),(1:(k*116))]
# TD patients w/o labels
z <- u[(n0+1):(n0+n1),(1:(k*116))]
t_l <- matrix(NA, P, 2)
label <- c(rep(0, n0), rep(1, n1))
# Simulation
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0 + n1)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1:n0]), cbind(z, Label = l[(n0+1):(n0+n1)]))
# Train the model on the permutated data set
model <-  svm(l ~ ., data = as.data.frame(u_t[,(1:k*116)]))
#model <- glmnet(u_t[,(1:(k*116))], l, family = "binomial", maxit = 80, alpha = 0.2)
#model <- glm(Label ~ ., data = as.data.frame(u_t))
# Get the model's scores
#score <- predict(model, u_t[,(1:(k*116))], s = 0.1)
score <- predict(model, as.data.frame(u_t[,(1:k*116)]))
# Find and save the test statistic computed on the scores
t_l[i, 1] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
#model <- glm(Label ~ ., data = as.data.frame(u_t))
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_t[,(1:(k*116))], s = 0.5)
t_l[i, 2] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
# par(mfrow = c(1,2))
# hist(t_l[,1], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'Support Vector Machine', xlab = 'test statistics') # TODO aggiungi main
# abline(v=quantile(t_l[,1], 1-alpha), lwd = 3, col = '#093824')
#
# model <- svm(label ~ ., data = as.data.frame(u[,(1:k*116)]))
# score <- predict(model, as.data.frame(u[,(1:k*116)]))
# abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l[,2], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'glm with regularization', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,2], 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
# hist(score[1:n0], col = '#093824', alpha = 0.5, xlim = c(0,1))
# hist(score[(n0+1):(n0+n1)], add = T, col = '#71B48D', alpha = 0.5)
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 500
# ASD patients w/o labels
x <- u[(1:50),(1:(k*116))]
# TD patients w/o labels
z <- u[(51:n0),(1:(k*116))]
u_T <- cbind(rbind(x, z), Label = c(rep(1, 50), rep(0, n0 - 50)))
t_l <- matrix(NA, P, 2)
label <- c(rep(1, 50), rep(0, n0 - 50))
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1: 50]), cbind(z, Label = l[51:n0]))
model <-  svm(l ~ ., data = as.data.frame(u_t[,(1:k*116)]))
#model <- glmnet(u_t[,(1:(k*116))], l, family = "binomial", maxit = 80, alpha = 0.2)
#model <- glm(Label ~ ., data = as.data.frame(u_t))
# Get the model's scores
#score <- predict(model, u_t[,(1:(k*116))], s = 0.1)
score <- predict(model, as.data.frame(u_t[,(1:k*116)]))
# Find and save the test statistic computed on the scores
t_l[i, 1] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_t[,(1:(k*116))], s = 0.05)
t_l[i, 2] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
par(mfrow = c(1,2))
hist(t_l[,1], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'Support Vector Machine', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,1], 1-alpha), lwd = 3, col = '#093824')
model <- svm(label ~ ., data = as.data.frame(u_T[,(1:k*116)]))
score <- predict(model, as.data.frame(u_T[,(1:k*116)]))
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l[,2], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'glm with regularization', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,2], 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 500
# ASD patients w/o labels
x <- u[(1:50),(1:(k*116))]
# TD patients w/o labels
z <- u[(51:n0),(1:(k*116))]
u_T <- cbind(rbind(x, z), Label = c(rep(1, 50), rep(0, n0 - 50)))
t_l <- matrix(NA, P, 2)
label <- c(rep(1, 50), rep(0, n0 - 50))
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1: 50]), cbind(z, Label = l[51:n0]))
model <-  svm(l ~ ., data = as.data.frame(u_t[,(1:k*116)]))
#model <- glmnet(u_t[,(1:(k*116))], l, family = "binomial", maxit = 80, alpha = 0.2)
#model <- glm(Label ~ ., data = as.data.frame(u_t))
# Get the model's scores
#score <- predict(model, u_t[,(1:(k*116))], s = 0.1)
score <- predict(model, as.data.frame(u_t[,(1:k*116)]))
# Find and save the test statistic computed on the scores
t_l[i, 1] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 90, alpha = 0.2)
score <- predict(model, u_t[,(1:(k*116))], s = 0.05)
t_l[i, 2] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
par(mfrow = c(1,2))
hist(t_l[,1], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'Support Vector Machine', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,1], 1-alpha), lwd = 3, col = '#093824')
model <- svm(label ~ ., data = as.data.frame(u_T[,(1:k*116)]))
score <- predict(model, as.data.frame(u_T[,(1:k*116)]))
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l[,2], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'glm with regularization', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,2], 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 90, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 500
# ASD patients w/o labels
x <- u[(1:50),(1:(k*116))]
# TD patients w/o labels
z <- u[(51:n0),(1:(k*116))]
u_T <- cbind(rbind(x, z), Label = c(rep(1, 50), rep(0, n0 - 50)))
t_l <- matrix(NA, P, 2)
label <- c(rep(1, 50), rep(0, n0 - 50))
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1: 50]), cbind(z, Label = l[51:n0]))
model <-  svm(l ~ ., data = as.data.frame(u_t[,(1:k*116)]))
#model <- glmnet(u_t[,(1:(k*116))], l, family = "binomial", maxit = 80, alpha = 0.2)
#model <- glm(Label ~ ., data = as.data.frame(u_t))
# Get the model's scores
#score <- predict(model, u_t[,(1:(k*116))], s = 0.1)
score <- predict(model, as.data.frame(u_t[,(1:k*116)]))
# Find and save the test statistic computed on the scores
t_l[i, 1] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 200, alpha = 0.2)
score <- predict(model, u_t[,(1:(k*116))], s = 0.05)
t_l[i, 2] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
par(mfrow = c(1,2))
hist(t_l[,1], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'Support Vector Machine', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,1], 1-alpha), lwd = 3, col = '#093824')
model <- svm(label ~ ., data = as.data.frame(u_T[,(1:k*116)]))
score <- predict(model, as.data.frame(u_T[,(1:k*116)]))
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l[,2], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'glm with regularization', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,2], 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 200, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
# par(mfrow = c(1,2))
# hist(t_l[,1], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'Support Vector Machine', xlab = 'test statistics') # TODO aggiungi main
# abline(v=quantile(t_l[,1], 1-alpha), lwd = 3, col = '#093824')
#
# model <- svm(label ~ ., data = as.data.frame(u_T[,(1:k*116)]))
# score <- predict(model, as.data.frame(u_T[,(1:k*116)]))
# abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l[,2], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'glm with regularization', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,2], 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 200, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
pcaCharts <- function(x) {
x.var <- x$sdev ^ 2
x.pvar <- x.var/sum(x.var)
# print("proportions of variance:")
# print(x.pvar)
par(mfrow=c(2,2))
plot(x.pvar,xlab="Principal component", ylab="Proportion of variance explained", ylim=c(0,1), type='b')
plot(cumsum(x.pvar),xlab="Principal component", ylab="Cumulative Proportion of variance explained", ylim=c(0,1), type='b')
screeplot(x)
screeplot(x,type="l")
par(mfrow=c(1,1))
}
n0 <- 85
n1<- 93
alpha <- 0.05
k <- 5
aux <- prcomp(u[,1:(k*116)], center = T, scale = T)
pcaCharts(aux)
k <- 10
PC <- aux$x[,1]
for(i in (2:k))
PC <- cbind(PC, aux$x[,i])
PC <- cbind(PC, Label = c(rep(1, 85), rep(0, 93)))
label <- c(rep(1, 85), rep(0, 93))
x <- PC[(1:85),(1:k)]
z <- PC[(86:178),(1:k)]
P <- 1000
t_l <- rep(NA, P)
# Simulation
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0+n1)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1:n0]), cbind(z, Label = l[(n0+1):(n0+n1)]))
model <- glmnet(u_t[,(1:k)], l, family = "binomial", maxit = 80, alpha = 0.2)
#model <- glm(Label ~ ., data = as.data.frame(u_t))
# Get the model's scores
score <- predict(model, u_t[,(1:k)], s = 0.05)
# Find and save the test statistic computed on the scores
t_l[i] <- ks.test(score[l == 0], score[l == 1])$statistic
}
hist(t_l, xlim = c(0,1), col ='#D3BDB0')
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(PC, l, family = "binomial", maxit = 80, alpha = 0.2)
#model <- glm(Label ~ ., data = as.data.frame(u_t))
# Get the model's scores
score <- predict(model, PC, s = 0.05)
abline(v=ks.test(score[1:n0], score[(n0+1):(n0+n1)])$statistic, col = '#71B48D', lwd =3)
# Number of features
k <- 5
asd <- c()
# Select all the informations and save them
for(i in (1:length(asd_st))){
paziente <- asd_st[[i]]
for(j in (1:116)){
p <- acf(paziente[[j]], lag = length(paziente[[j]]), type = "covariance", pl=F)$acf
asd <- c(asd, mean(p))
asd <- c(asd, sd(p))
asd <- c(asd, quantile(paziente[[j]], 0.25))
asd <- c(asd, median(p))
asd <- c(asd, quantile(paziente[[j]], 0.75))
}
}
asd <- t(matrix(asd, nrow = 116*k))
td <- c()
# Select all the informations and save them
for(i in (1:length(td_st))){
paziente <- td_st[[i]]
for(j in (1:116)){
p <- acf(paziente[[j]], lag = length(paziente[[j]]), type = "covariance", pl=F)$acf
td <- c(td, mean(p))
td <- c(td, sd(p))
td <- c(td, quantile(paziente[[j]], 0.25))
td <- c(td, median(p))
td <- c(td, quantile(paziente[[j]], 0.75))
}
}
td <- t(matrix(td, nrow = 116*k))
# Put the data together with the labels
u <- cbind(rbind(asd, td), Label = c(rep(1, length(asd_data)), rep(0, length(td_data))))
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 200
# ASD patients w/o labels
x <- u[(1:n0),(1:(k*116))]
# TD patients w/o labels
z <- u[(n0+1):(n0+n1),(1:(k*116))]
t_l <- matrix(NA, P, 2)
label <- c(rep(0, n0), rep(1, n1))
# Simulation
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0 + n1)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1:n0]), cbind(z, Label = l[(n0+1):(n0+n1)]))
# Train the model on the permutated data set
model <-  svm(l ~ ., data = as.data.frame(u_t[,(1:k*116)]))
#model <- glmnet(u_t[,(1:(k*116))], l, family = "binomial", maxit = 80, alpha = 0.2)
#model <- glm(Label ~ ., data = as.data.frame(u_t))
# Get the model's scores
#score <- predict(model, u_t[,(1:(k*116))], s = 0.1)
score <- predict(model, as.data.frame(u_t[,(1:k*116)]))
# Find and save the test statistic computed on the scores
t_l[i, 1] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
#model <- glm(Label ~ ., data = as.data.frame(u_t))
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_t[,(1:(k*116))], s = 0.5)
t_l[i, 2] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
# par(mfrow = c(1,2))
# hist(t_l[,1], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'Support Vector Machine', xlab = 'test statistics') # TODO aggiungi main
# abline(v=quantile(t_l[,1], 1-alpha), lwd = 3, col = '#093824')
#
# model <- svm(label ~ ., data = as.data.frame(u[,(1:k*116)]))
# score <- predict(model, as.data.frame(u[,(1:k*116)]))
# abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l[,2], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'glm with regularization', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,2], 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
# hist(score[1:n0], col = '#093824', alpha = 0.5, xlim = c(0,1))
# hist(score[(n0+1):(n0+n1)], add = T, col = '#71B48D', alpha = 0.5)
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 500
# ASD patients w/o labels
x <- u[(1:50),(1:(k*116))]
# TD patients w/o labels
z <- u[(51:n0),(1:(k*116))]
u_T <- cbind(rbind(x, z), Label = c(rep(1, 50), rep(0, n0 - 50)))
t_l <- matrix(NA, P, 2)
label <- c(rep(1, 50), rep(0, n0 - 50))
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1: 50]), cbind(z, Label = l[51:n0]))
model <-  svm(l ~ ., data = as.data.frame(u_t[,(1:k*116)]))
#model <- glmnet(u_t[,(1:(k*116))], l, family = "binomial", maxit = 80, alpha = 0.2)
#model <- glm(Label ~ ., data = as.data.frame(u_t))
# Get the model's scores
#score <- predict(model, u_t[,(1:(k*116))], s = 0.1)
score <- predict(model, as.data.frame(u_t[,(1:k*116)]))
# Find and save the test statistic computed on the scores
t_l[i, 1] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 200, alpha = 0.2)
score <- predict(model, u_t[,(1:(k*116))], s = 0.05)
t_l[i, 2] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
# par(mfrow = c(1,2))
# hist(t_l[,1], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'Support Vector Machine', xlab = 'test statistics') # TODO aggiungi main
# abline(v=quantile(t_l[,1], 1-alpha), lwd = 3, col = '#093824')
#
# model <- svm(label ~ ., data = as.data.frame(u_T[,(1:k*116)]))
# score <- predict(model, as.data.frame(u_T[,(1:k*116)]))
# abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l[,2], xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'glm with regularization', xlab = 'test statistics') # TODO aggiungi main
abline(v=quantile(t_l[,2], 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 200, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
