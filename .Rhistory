cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", 0, "k", "alpha"))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
m <- 0
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m", "k", "alpha"))
ll <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
ll <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
ll
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
m <- 0
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
cl <- makeCluster(detectCores())
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m", "k", "alpha"))
ll <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m, k, alpha))
ll
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
ll == 0
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(ll == 0)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(ll == 0)/P
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
seq(0, 0.5, by = 0.1)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- matrix(NA, 6, 2)
cl <- makeCluster(detectCores())
mu <- seq(0, 0.5, by = 0.1)
for(m in (1:6)){
m_t <- mu[m]
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m_t", "k", "alpha"))
t_l[m, 1] <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m_t, k, alpha))
t_l[m, 2] <- mu[m]
}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
set.seed(2611)
simul <- function(x, n0, n1, mu, k, alpha){
z_t <- mvrnorm(n1, mu = rep(0, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
return(1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha))
}
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- matrix(NA, 6, 2)
cl <- makeCluster(detectCores())
mu <- seq(0, 0.5, by = 0.1)
for(m in (1:6)){
m_t <- mu[m]
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m_t", "k", "alpha"))
t_l[m, 1] <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m_t, k, alpha))
t_l[m, 2] <- mu[m]
}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
mu <- seq(0, 0.5, by = 0.1)
for(m in (1:6)){
m_t <- mu[m]
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m_t", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m_t, k, alpha)))
}
t_l <- matrix(t_l, ncol = P)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
t_l
View(t_l)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
t_l[,6]
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
t_l[6,]
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[6,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[5,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[4,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[3,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[2,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[1,] )
library(MASS)
set.seed(123)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- rep(NA, P)
for(i in (1:P)){
z_t <- mvrnorm(n1, mu = rep(0, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
t_l[i] <- 1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha)
}
barplot(table(t_l))
table(t_l)
?prob.table
barplot(prob.table(table(t_l)))
barplot(cumsum(table(t_l)))
cumsum(table(t_l))
barplot(cumsum(t_l))
cumsum(t_l)
barplot(table(t_l))
barplot(table(t_l/sum(t_l)))
barplot(table(t_l), ylab = 'Probability')
hist(table(t_l), ylab = 'Probability')
hist(t_l, prob =T)
hist(t_l, prob = T)
barplot(table(t_l), prob = T)
table(t_l)
table(t_l)
barplot(prop.table(table(t_l)))
(prop.table(table(t_l)))
#t_l <- matrix(NA, P, 11)
P <- 10000
t_l <- rep(NA, P)
m <- 0.5
for(i in (1:P)){
z_t <- mvrnorm(n1, mu = rep(m, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
t_l[i] <- 1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha)
}
barplot(prop.table(table(t_l)))
table(t_l)
#t_l <- matrix(NA, P, 11)
P <- 10000
t_l <- rep(NA, P)
m <- 0.3
for(i in (1:P)){
z_t <- mvrnorm(n1, mu = rep(m, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
t_l[i] <- 1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha)
}
barplot(prop.table(table(t_l)))
table(t_l)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
set.seed(123)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
simul <- function(x, n0, n1, mu, k, alpha){
z_t <- mvrnorm(n1, mu = rep(0, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
return(1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha))
}
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
mu <- seq(0, 0.5, by = 0.1)
for(m in (1:6)){
m_t <- mu[m]
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m_t", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m_t, k, alpha)))
}
t_l <- matrix(t_l, ncol = P)
sum(t_l[1,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[2,] )
t_l
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[3,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
table(t_l[3,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
table(t_l[1,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
table(t_l[2,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
table(t_l[3,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
table(t_l[4,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
table(t_l[5,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
table(t_l[6,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
mu <- seq(0, 1, by = 0.1)
for(m in (1:11)){
m_t <- mu[m]
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m_t", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m_t, k, alpha)))
}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
for(mu in seq(0, 1, by = 0.1)){
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "mu", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, mu, k, alpha)))
}
t_l <- matrix(t_l, ncol = P)
table(t_l[6,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
for(i in (1:11)) table(t_l[i,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
for(i in (1:11)) barplot(table(t_l[i,] ))
table(t_l[i,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
for(i in (1:11)) print(table(t_l[i,] ))
set.seed(123)
simul <- function(x, n0, n1, mu, k, alpha){
z_t <- mvrnorm(n1, mu = rep(0, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
return(1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha))
}
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
for(mu in seq(0, 1, by = 0.1)){
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "mu", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, mu, k, alpha)))
}
t_l <- matrix(t_l, ncol = P)
for(i in (1:11)) print(table(t_l[i,] ))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
for(mu in seq(0, 10, by = 2)){
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "mu", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, mu, k, alpha)))
}
t_l <- matrix(t_l, ncol = P)
for(i in (1:11)) print(table(t_l[i,] ))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
simul <- function(x, n0, n1, mu, k, alpha){
z_t <- mvrnorm(n1, mu = rep(mu, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u))
return(1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha))
}
set.seed(123)
set.seed(123)
set.seed(123)
set.seed(123)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
for(mu in seq(0, 10, by = 2)){
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "mu", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, mu, k, alpha)))
}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
simul <- function(x, n0, n1, mu, k, alpha){
z_t <- mvrnorm(n1, mu = rep(mu, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
return(1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha))
}
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
for(mu in seq(0, 10, by = 2)){
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "mu", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, mu, k, alpha)))
}
t_l <- matrix(t_l, ncol = P)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
for(i in (1:6)) print(table(t_l[i,] ))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
simul <- function(x, n0, n1, mu, k, alpha){
print(mu)
z_t <- mvrnorm(n1, mu = rep(mu, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
return(1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha))
}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
for(mu in seq(0, 10, by = 5)){
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "mu", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, mu, k, alpha)))
}
t_l <- matrix(t_l, ncol = P)
for(i in (1:6)) print(table(t_l[i,] ))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
simul <- function(x, n0, n1, mu, k, alpha){
z_t <- mvrnorm(n1, mu = rep(mu, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
return(1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha))
}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
close(cl)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
stopCluster(cl)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
set.seed(123)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
for(mu in seq(0, 10, by = 5)){
print(mu)
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "mu", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, mu, k, alpha)))
}
t_l <- matrix(t_l, ncol = P)
stopCluster(cl)
for(i in (1:6)) print(table(t_l[i,] ))
set.seed(123)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
for(mu in seq(0, 10, by = 5)){
print(mu)
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "mu", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, mu, k, alpha)))
}
t_l <- matrix(t_l, ncol = P)
stopCluster(cl)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
for(i in (1:3)) print(table(t_l[i,] ))
mu
