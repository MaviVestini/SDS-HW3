results <- matrix(NA, nrow = P, ncol = 2)
for(i in (1:P)){
p <- data.frame(cbind(mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))))
q <- data.frame(cbind(mvrnorm(n1, mu = rep(0, k), Sigma = diag(k))))
data <- rbind(cbind(p, Label = 0), cbind(q, Label = 1))
# Get the results for the true data
coefs <- glm(Label ~ ., data = as.data.frame(data))
score <- predict(coefs, as.data.frame(data))
ks_true <- ks.test(score[1:n0], score[(n0+1):(n0+n1)], alternative = "two.sided")$statistic
#mann_true <- wilcox.test(ps, qs, alternative = "two.sided")$statistic
results[i,1] <- 1*(ks_true > quantile(t_l, alpha/2) & ks_true < quantile(t_l, 1 - (alpha/2)) )
results[i, 2] <- ks_true
abline(v = ks_true, col = 'red')
#results[i,2] <- 1*(mann_true < quantile(stats[,2], 1-alpha))
}
barplot(table(results[,1]))
results
results
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
set.seed(2611)
set.seed(2611)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
simul <- function(x, n0, n1, mu, k, alpha){
z_t <- mvrnorm(n1, mu = rep(0, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
return(1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha))
}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
simul(x, n0, n1, 0, k, alpha)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
simul(x, n0, n1, 0, k, alpha)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
simul(x, n0, n1, 0, k, alpha)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
simul(x, n0, n1, 0, k, alpha)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
simul(x, n0, n1, 0, k, alpha)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
simul(x, n0, n1, 0, k, alpha)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
simul(x, n0, n1, 0, k, alpha)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
simul(x, n0, n1, 0, k, alpha)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
mclapply((1:P), simul(x, n0, n1, 0, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
mclapply((1:P), function(.) simul(x, n0, n1, 0, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- mclapply((1:P), function(.) simul(x, n0, n1, 0, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
t_l
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- mclapply(P, function(.) simul(x, n0, n1, 0, k, alpha), mc.cores = )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- mclapply(P, function(.) simul(x, n0, n1, 0, k, alpha) )
t_l
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
t_l
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
cl <- clusterEvalQ(cl, { library(sf) })
install.packages("sf")
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
cl <- clusterEvalQ(cl, { library(sf) })
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
ll <- parallel::parLapply(cl, seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
cl <- clusterEvalQ(cl, { library(sf) })
cl <- clusterExport(cl, "st_linestring")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
#cl <- clusterExport(cl, "st_linestring")
ll <- parallel::parLapply(cl, seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
clusterExport(cl,  "Boston")
ll <- parallel::parLapply(cl, seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
simul <- function(x, n0, n1, mu, k, alpha){
z_t <- mvrnorm(n1, mu = rep(0, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
return(1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha))
}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
ll <- parallel::parLapply(cl, seq(1, P), simul(x, n0, n1, 0, k, alpha) )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
ll <- parallel::parSapply(cl, seq(1, P), simul(x, n0, n1, 0, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
ll <- parallel::parSapply(cl, seq(1, P), function() simul(x, n0, n1, 0, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
ll <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
clusterExport(cl, "Simul")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
clusterExport(cl, "simul")
ll <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
clusterExport(cl, c("simul", "mvrnorm")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
clusterExport(cl, c("simul", "mvrnorm"))
ll <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
clusterExport(cl, c("simul", "mvrnorm", x, n0, n1, 0, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "0", "k", "alpha"))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", 0, "k", "alpha"))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 1000
alpha <- 0.05
m <- 0
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
#t_l <- mclapply(seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha) )
cl <- makeCluster(detectCores())
#cl <- clusterEvalQ(cl, { library(sf) })
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m", "k", "alpha"))
ll <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, 0, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
ll <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m, k, alpha))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
ll
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
m <- 0
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
cl <- makeCluster(detectCores())
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m", "k", "alpha"))
ll <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m, k, alpha))
ll
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
ll == 0
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(ll == 0)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(ll == 0)/P
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
seq(0, 0.5, by = 0.1)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- matrix(NA, 6, 2)
cl <- makeCluster(detectCores())
mu <- seq(0, 0.5, by = 0.1)
for(m in (1:6)){
m_t <- mu[m]
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m_t", "k", "alpha"))
t_l[m, 1] <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m_t, k, alpha))
t_l[m, 2] <- mu[m]
}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
set.seed(2611)
simul <- function(x, n0, n1, mu, k, alpha){
z_t <- mvrnorm(n1, mu = rep(0, k), Sigma = diag(k))
u_t <- rbind(cbind(x, Label = 0), cbind(z_t, Label = 1))
model <- glm(Label ~ ., data = as.data.frame(u_t))
score <- predict(model, as.data.frame(u_t))
return(1*((ks.test(score[1:n0], score[(n0+1):(n0+n1)])$p.value) > alpha))
}
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- matrix(NA, 6, 2)
cl <- makeCluster(detectCores())
mu <- seq(0, 0.5, by = 0.1)
for(m in (1:6)){
m_t <- mu[m]
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m_t", "k", "alpha"))
t_l[m, 1] <- parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m_t, k, alpha))
t_l[m, 2] <- mu[m]
}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
n0 <- 80
n1 <- 90
k <- 3
P <- 10000
alpha <- 0.05
x <- mvrnorm(n0, mu = rep(0, k), Sigma = diag(k))
t_l <- c()
cl <- makeCluster(detectCores())
mu <- seq(0, 0.5, by = 0.1)
for(m in (1:6)){
m_t <- mu[m]
clusterExport(cl, c("simul", "mvrnorm", "x", "n0", "n1", "m_t", "k", "alpha"))
t_l <- c(t_l, parallel::parSapply(cl, seq(1, P), function(.) simul(x, n0, n1, m_t, k, alpha)))
}
t_l <- matrix(t_l, ncol = P)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
t_l
View(t_l)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
t_l[,6]
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
t_l[6,]
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[6,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[5,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[4,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[3,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[2,] )
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(parallel)
sum(t_l[1,] )
