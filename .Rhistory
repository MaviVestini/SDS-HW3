mtext(paste('Number of features k:', k, 'n0:', n0, 'and n1:', n1), side=1, line = +3, col = '#715B64')
plot(POWER[(1:11),1], y = POWER[(1:11),2] ,xlab = 'Distance of the distributions', ylab = 'Power', main = TeX(r'(Power of the test/distance)'), type = 'l', lwd = 2)
points(POWER[(1:11),1], POWER[(1:11),2], col = '#715B64', pch = 19)
par(mfrow = c(1,2))
barplot(prop.table(table(result[,1])), col = c('#715B64','#D3BDB0'), main = TeX(r'(Probabilities with $H_0$ true)'), names.arg = c('Reject','No Reject'))
abline(h = alpha)
legend('topleft', legend = c('alpha'), lty = 1, box.lwd = 0)
mtext(paste('Number of features k:', k, 'n0:', n0, 'and n1:', n1), side=1, line = +3, col = '#715B64')
plot(POWER[(1:11),1], y = POWER[(1:11),2] ,xlab = 'Distance of the distributions', ylab = 'Power', main = TeX(r'(Power of the test/distance)'), type = 'l', lwd = 2)
points(POWER[(1:11),1], POWER[(1:11),2], col = '#715B64', pch = 19)
# Load the data
load('hw3_data.Rdata')
# Put the data together
data <- c(asd_data, td_data)
# Get the initial of the labs
lab <- names(data)
iniziali <- c()
for(name in lab) {
iniziali <- c(iniziali, substr(name,1,2))
}
# And take the unique ones
iniziali_unique <- unique(iniziali)
# Iterate over initials
for(start in iniziali_unique){
elements <- c()
# Select the indexes of the patients of the lab
idx <- seq(1:length(iniziali))[iniziali == start]
# Compute mean
mu <- mean(unlist(data[idx]))
# And standard deviation
s <- sd(unlist(data[idx]))
# Standardize
for(i in idx){
patient <- data[[i]]
for(j in (1:116)){
patient[[j]] <- (patient[[j]]-mu)/s
}
data[[i]] <- patient
}
}
# Save the standardized data
asd_st <- data[1:85]
td_st <- data[86:178]
# Number of features
k <- 5
asd <- c()
# Select all the informations and save them
for(i in (1:length(asd_st))){
paziente <- asd_st[[i]]
for(j in (1:116)){
p <- paziente[[j]]
# Collect al the statistic summaries
asd <- c(asd, mean(p))
asd <- c(asd, sd(p))
asd <- c(asd, quantile(p, 0.25))
asd <- c(asd, median(p))
asd <- c(asd, quantile(p, 0.75))
}
}
# Put the data in matrix form
asd <- t(matrix(asd, nrow = 116*k))
td <- c()
# Select all the informations and save them
for(i in (1:length(td_st))){
paziente <- td_st[[i]]
for(j in (1:116)){
p <- paziente[[j]]
td <- c(td, mean(p))
td <- c(td, sd(p))
td <- c(td, quantile(p, 0.25))
td <- c(td, median(p))
td <- c(td, quantile(p, 0.75))
}
}
# Put the data in matrix form
td <- t(matrix(td, nrow = 116*k))
# Put the data together with the labels
u <- cbind(rbind(asd, td), Label = c(rep(1, length(asd_data)), rep(0, length(td_data))))
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 200
# ASD patients w/o labels
x <- u[(1:n0),(1:(k*116))]
# TD patients w/o labels
z <- u[(n0+1):(n0+n1),(1:(k*116))]
t_l <- rep(NA, P)
# Actual labels
label <- c(rep(0, n0), rep(1, n1))
# Simulation
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0 + n1)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1:n0]), cbind(z, Label = l[(n0+1):(n0+n1)]))
# Train the model on the permutated data set
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
# Get the model's scores
score <- predict(model, u_t[,(1:(k*116))], s = 0.5)
# Find and save the test statistic computed on the scores
t_l[i] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
alpha <- 0.05
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/TD with glm with regularization', xlab = 'test statistics')
legend(0.7, 5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
# Simulation size
P <- 500
# ASD patients w/o labels
x <- u[(1:50),(1:(k*116))]
# TD patients w/o labels
z <- u[(51:n0),(1:(k*116))]
u_T <- cbind(rbind(x, z), Label = c(rep(1, 50), rep(0, n0 - 50)))
t_l <- rep(NA, P)
# Actual labels
label <- c(rep(1, 50), rep(0, n0 - 50))
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1: 50]), cbind(z, Label = l[51:n0]))
# Train a model
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
# Get the model's scores
score <- predict(model, u_t[,(1:(k*116))], s = 0.05)
# Find and save the test statistic computed on the scores
t_l[i] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/ASD with glm with regularization', xlab = 'test statistics') # TODO aggiungi main
legend(0, 5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
# Number of features
k <- 5
asd <- c()
# Select all the informations and save them
for(i in (1:length(asd_st))){
paziente <- asd_st[[i]]
for(j in (1:116)){
if(length(unique(paziente[[j]])) != 1)
# Get the autocorrelation if the values of the time series are not all the same
p <- acf(paziente[[j]], lag = length(paziente[[j]]), type = "correlation", pl = F)$acf
else
# Else put a vector of all 1s
p <- rep(1, length(paziente[[j]]) - 1)
# Collect al the statistic summaries
asd <- c(asd, mean(p))
asd <- c(asd, sd(p))
asd <- c(asd, quantile(p, 0.25))
asd <- c(asd, median(p))
asd <- c(asd, quantile(p, 0.75))
}
}
# Put the data in matrix form
asd <- t(matrix(asd, nrow = 116*k))
td <- c()
# Select all the informations and save them
for(i in (1:length(td_st))){
paziente <- td_st[[i]]
for(j in (1:116)){
if(length(unique(paziente[[j]])) != 1)
# Get the autocorrelation if the values of the time series are not all the same
p <- acf(paziente[[j]], lag = length(paziente[[j]]), type = "correlation", pl = F)$acf
else
# Else put a vector of all 1s
p <- rep(1, length(paziente[[j]]) - 1)
# Collect al the statistic summaries
td <- c(td, mean(p))
td <- c(td, sd(p))
td <- c(td, quantile(p, 0.25))
td <- c(td, median(p))
td <- c(td, quantile(p, 0.75))
}
}
# Put the data in matrix form
td <- t(matrix(td, nrow = 116*k))
# Put the data together with the labels
u <- cbind(rbind(asd, td), Label = c(rep(1, length(asd_data)), rep(0, length(td_data))))
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 200
# ASD patients w/o labels
x <- u[(1:n0),(1:(k*116))]
# TD patients w/o labels
z <- u[(n0+1):(n0+n1),(1:(k*116))]
t_l <- rep(NA, P)
# Actual labels
label <- c(rep(0, n0), rep(1, n1))
# Simulation
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0 + n1)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1:n0]), cbind(z, Label = l[(n0+1):(n0+n1)]))
# Train the model on the permutated data set
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
# Get the model's scores
score <- predict(model, u_t[,(1:(k*116))], s = 0.5)
# Find and save the test statistic computed on the scores
t_l[i] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/TD with glm with regularization', xlab = 'test statistics')
legend(0.7, 5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
# Simulation size
P <- 500
# ASD patients w/o labels
x <- u[(1:50),(1:(k*116))]
# TD patients w/o labels
z <- u[(51:n0),(1:(k*116))]
u_T <- cbind(rbind(x, z), Label = c(rep(1, 50), rep(0, n0 - 50)))
t_l <- rep(NA, P)
# Actual labels
label <- c(rep(1, 50), rep(0, n0 - 50))
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1: 50]), cbind(z, Label = l[51:n0]))
# Train a model
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
# Get the model's scores
score <- predict(model, u_t[,(1:(k*116))], s = 0.05)
# Find and save the test statistic computed on the scores
t_l[i] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/ASD with glm with regularization', xlab = 'test statistics') # TODO aggiungi main
legend(0, 5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/ASD with glm with regularization', xlab = 'test statistics') # TODO aggiungi main
legend(0, 4, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/ASD with glm with regularization', xlab = 'test statistics') # TODO aggiungi main
legend(0, 4.5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 200
# ASD patients w/o labels
x <- u[(1:n0),(1:(k*116))]
# TD patients w/o labels
z <- u[(n0+1):(n0+n1),(1:(k*116))]
t_l <- rep(NA, P)
# Actual labels
label <- c(rep(0, n0), rep(1, n1))
# Simulation
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0 + n1)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1:n0]), cbind(z, Label = l[(n0+1):(n0+n1)]))
# Train the model on the permutated data set
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
# Get the model's scores
score <- predict(model, u_t[,(1:(k*116))], s = 0.5)
# Find and save the test statistic computed on the scores
t_l[i] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/TD with glm with regularization', xlab = 'test statistics')
legend(0.7, 5.5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/TD with glm with regularization', xlab = 'test statistics')
legend(0.7, 4.5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/TD with glm with regularization', xlab = 'test statistics')
legend(0.7, 5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
alpha <- 0.05
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/TD with glm with regularization', xlab = 'test statistics')
legend(0.7, 5.2, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
# Number of features
k <- 5
asd <- c()
# Select all the informations and save them
for(i in (1:length(asd_st))){
paziente <- asd_st[[i]]
for(j in (1:116)){
if(length(unique(paziente[[j]])) != 1)
# Get the autocorrelation if the values of the time series are not all the same
p <- acf(paziente[[j]], lag = length(paziente[[j]]), type = "correlation", pl = F)$acf
else
# Else put a vector of all 1s
p <- rep(1, length(paziente[[j]]) - 1)
# Collect al the statistic summaries
asd <- c(asd, mean(p))
asd <- c(asd, sd(p))
asd <- c(asd, quantile(p, 0.25))
asd <- c(asd, median(p))
asd <- c(asd, quantile(p, 0.75))
}
}
# Put the data in matrix form
asd <- t(matrix(asd, nrow = 116*k))
td <- c()
# Select all the informations and save them
for(i in (1:length(td_st))){
paziente <- td_st[[i]]
for(j in (1:116)){
if(length(unique(paziente[[j]])) != 1)
# Get the autocorrelation if the values of the time series are not all the same
p <- acf(paziente[[j]], lag = length(paziente[[j]]), type = "correlation", pl = F)$acf
else
# Else put a vector of all 1s
p <- rep(1, length(paziente[[j]]) - 1)
# Collect al the statistic summaries
td <- c(td, mean(p))
td <- c(td, sd(p))
td <- c(td, quantile(p, 0.25))
td <- c(td, median(p))
td <- c(td, quantile(p, 0.75))
}
}
# Put the data in matrix form
td <- t(matrix(td, nrow = 116*k))
# Put the data together with the labels
u <- cbind(rbind(asd, td), Label = c(rep(1, length(asd_data)), rep(0, length(td_data))))
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 200
# ASD patients w/o labels
x <- u[(1:n0),(1:(k*116))]
# TD patients w/o labels
z <- u[(n0+1):(n0+n1),(1:(k*116))]
t_l <- rep(NA, P)
# Actual labels
label <- c(rep(0, n0), rep(1, n1))
# Simulation
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0 + n1)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1:n0]), cbind(z, Label = l[(n0+1):(n0+n1)]))
# Train the model on the permutated data set
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
# Get the model's scores
score <- predict(model, u_t[,(1:(k*116))], s = 0.5)
# Find and save the test statistic computed on the scores
t_l[i] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/TD with glm with regularization', xlab = 'test statistics')
legend(0.7, 5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
# Simulation size
P <- 500
# ASD patients w/o labels
x <- u[(1:50),(1:(k*116))]
# TD patients w/o labels
z <- u[(51:n0),(1:(k*116))]
u_T <- cbind(rbind(x, z), Label = c(rep(1, 50), rep(0, n0 - 50)))
t_l <- rep(NA, P)
# Actual labels
label <- c(rep(1, 50), rep(0, n0 - 50))
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1: 50]), cbind(z, Label = l[51:n0]))
# Train a model
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
# Get the model's scores
score <- predict(model, u_t[,(1:(k*116))], s = 0.05)
# Find and save the test statistic computed on the scores
t_l[i] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/ASD with glm with regularization', xlab = 'test statistics') # TODO aggiungi main
legend(0, 4.5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
# Size of the original data frames
n0 <- 85
n1<- 93
# Simulation size
P <- 200
# ASD patients w/o labels
x <- u[(1:n0),(1:(k*116))]
# TD patients w/o labels
z <- u[(n0+1):(n0+n1),(1:(k*116))]
t_l <- rep(NA, P)
# Actual labels
label <- c(rep(0, n0), rep(1, n1))
# Simulation
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0 + n1)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1:n0]), cbind(z, Label = l[(n0+1):(n0+n1)]))
# Train the model on the permutated data set
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
# Get the model's scores
score <- predict(model, u_t[,(1:(k*116))], s = 0.5)
# Find and save the test statistic computed on the scores
t_l[i] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/TD with glm with regularization', xlab = 'test statistics')
legend(0.7, 4.7, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:n0]), as.numeric(score[(n0+1):(n0+n1)]))$statistic, col = '#71B48D', lwd =3)
# Simulation size
P <- 500
# ASD patients w/o labels
x <- u[(1:50),(1:(k*116))]
# TD patients w/o labels
z <- u[(51:n0),(1:(k*116))]
u_T <- cbind(rbind(x, z), Label = c(rep(1, 50), rep(0, n0 - 50)))
t_l <- rep(NA, P)
# Actual labels
label <- c(rep(1, 50), rep(0, n0 - 50))
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1: 50]), cbind(z, Label = l[51:n0]))
# Train a model
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 20, alpha = 0.2)
# Get the model's scores
score <- predict(model, u_t[,(1:(k*116))], s = 0.1)
# Find and save the test statistic computed on the scores
t_l[i] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/ASD with glm with regularization', xlab = 'test statistics') # TODO aggiungi main
legend(0, 4.5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 20, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.1)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
# Simulation size
P <- 500
# ASD patients w/o labels
x <- u[(1:50),(1:(k*116))]
# TD patients w/o labels
z <- u[(51:n0),(1:(k*116))]
u_T <- cbind(rbind(x, z), Label = c(rep(1, 50), rep(0, n0 - 50)))
t_l <- rep(NA, P)
# Actual labels
label <- c(rep(1, 50), rep(0, n0 - 50))
for(i in (1:P)){
# Permutate the labels
l <- sample(label, n0)
# Put the samples together with the permutated labels
u_t <- rbind(cbind(x, Label = l[1: 50]), cbind(z, Label = l[51:n0]))
# Train a model
model <- glmnet(u_t[,(1:(k*116))], l, family = "gaussian", maxit = 100, alpha = 0.2)
# Get the model's scores
score <- predict(model, u_t[,(1:(k*116))], s = 0.05)
# Find and save the test statistic computed on the scores
t_l[i] <- ks.test(as.numeric(score[l == 0]), as.numeric(score[l == 1]))$statistic
}
hist(t_l, xlim = c(0,1), col ='#D3BDB0', prob = T, main = 'ASD/ASD with glm with regularization', xlab = 'test statistics') # TODO aggiungi main
legend(0, 4.5, legend=c("Quantile(1 - alpha)", "Test statistic"),
col=c('#093824', '#71B48D'), box.lty=0, lty=1, lwd=3  ,cex=0.8)
abline(v=quantile(t_l, 1-alpha), lwd = 3, col = '#093824')
model <- glmnet(u_T[,(1:(k*116))], label, family = "gaussian", maxit = 100, alpha = 0.2)
score <- predict(model, u_T[,(1:(k*116))], s = 0.05)
abline(v=ks.test(as.numeric(score[1:50]), as.numeric(score[(50+1):(n0)]))$statistic, col = '#71B48D', lwd =3)
